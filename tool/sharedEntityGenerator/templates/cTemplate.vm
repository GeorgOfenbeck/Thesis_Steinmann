## The generated c++ classes have a getter and a setter for each normal field. 
## A list only has a setter. The CType is used both for the backing field,
## the getter and the setter.
##
## A list always has a new list instance as default value.
##

#ifndef ${class.cName}_H
\#define ${class.cName}_H
\#include "MultiLanguageIncludes.h"
\#include <vector>
\#include <string>
\#include <stdint.h>
\#include <set>
\#include <map>

#foreach ($reference in $references)
class $reference;
#end

class $class.Name;

#if ($class.class.simpleName=="MultiLanguageDerivedClass")
\#include "${baseClassInclude}.h"
#end
						
/** $class.comment */
class $class.cName #if ($class.hascBaseType()) : public $class.cBaseType #end{
#foreach($field in $class.fields)
	private: 
	
	$field.getcType() $field.name;
	
	public:
	
	
	## for lists, there is no setter, but the getter returns a reference to the vector
	#if ($field.class.simpleName == "MultiLanguageList")
		/** $field.comment */
		$field.getcType() &get${field.nameUpperCamel}(){
			return $field.name;
		}
	#else
		## create getter and setter for a normal field
		/** $field.comment */
		$field.getcType() get${field.nameUpperCamel}(){
			return $field.name;
		}
		
		/** $field.comment */	
		void set${field.nameUpperCamel}($field.getcType() value){
			${field.name} = value;
		}
	#end 
#end

## create clone method
public:
	#if (!$class.isAbstract())
	virtual $class.cName * clone(std::map<PolymorphicBase*,PolymorphicBase*> &map);
	#end
	
	virtual void cloneFrom($class.cName *c, std::map<PolymorphicBase*,PolymorphicBase*> &map);
	virtual void addAll(std::set<SharedEntityBase*> &result);
};
#endif
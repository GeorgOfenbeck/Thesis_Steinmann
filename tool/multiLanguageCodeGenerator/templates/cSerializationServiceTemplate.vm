\#include "MultiLanguageSerializationService.h"
\#include <typeinfo>
\#include <string>
\#include <cstdio>

#foreach($class in $classes)
\#include "${class.name}.h"
#end

using namespace std;

bool readString(FILE *input,std::string str){
	int dummy; // used to remove warning
	return fscanf(input,str.c_str(),&dummy)==(signed)str.length();
}

void MultiLanguageSerializationService::Serialize(MultiLanguageObjectBase *o, ostream &output){
	if (o==NULL){
		output<<"<null>\n";
	}
	
#foreach($class in $classes)
	if (o->getType()== MULTI_LANGUAGE_TYPE_ENUM_$class.name ){
		output << "$class.name" <<"\n";
#foreach($field in $class.fields)
	output << "${field.name}";
	#if ($field.class.simpleName=="MultiLanguageList")
		{
			unsigned size= ((${class.name}*)o)->get${field.nameUpperCamel}().size();
			output << "\t" << size << "\n";
		
			for (int i=0; i<size; i++){
			saflkij
			}
		}
	#else
		output << "\t" << ((${class.name}*)o)->get${field.nameUpperCamel}() << "\n";
	#end
		return;
	}
#end
	
	std::string errorMessage="Unknown class: ";
	errorMessage+=typeid(o).name();

	throw errorMessage;
}
	
	
MultiLanguageObjectBase * MultiLanguageSerializationService::DeSerialize(istream &input){
	string line;
	
	getline(input,line);
	
	if (line.compare("<null>")==0){
		return NULL;
	}

#foreach($class in $classes)		
	if (line.compare("$class.name")==0){
		$class.name *result=new ${class.name}();
		getline(input,line);
#foreach($field in $class.fields)
		{
#if ($field.type == "bool")
			int value;
#else
			$field.type value;
#end
			if (sscanf(line.c_str(),"${field.name}\t${field.scanfSpecification}",&value)!=1){
				throw "Parse Error";
			}
			result->set${field.nameUpperCamel}(value);
			
			getline(input,line);
		}
#end
		return result;
	}
#end

	throw "Parse Error";
}
\#include "MultiLanguageSerializationService.h"
\#include <typeinfo>
\#include <string>
\#include <cstdio>

#foreach($class in $classes)
\#include "${class.name}.h"
#end

using namespace std;

bool readString(FILE *input,std::string str){
	int dummy; // used to remove warning
	return fscanf(input,str.c_str(),&dummy)==(signed)str.length();
}

#macro(serializeNonList $field )
	#if ($field.typeDescriptor.reference)
		Serialize(value,output);
	#else
		output<<value<<"\n";
	#end
#end 

void MultiLanguageSerializationService::Serialize(MultiLanguageObjectBase *o, ostream &output){
	if (o==NULL){
		output<<"<null>\n";
		return;
	}
	
#foreach($class in $classes)
	if (o->getType()== MULTI_LANGUAGE_TYPE_ENUM_$class.name ){
		output << "$class.name" <<"\n";
		#foreach($field in $class.fields)
			{
				output << "${field.name}\n";
				$field.cType value=((${class.name}*)o)->get${field.nameUpperCamel}();
				
				#if ($field.class.simpleName=="MultiLanguageList")
				{
					$field.cType list=value;
					unsigned size= list.size();
					output << size << "\n";
				
					for (unsigned i=0; i<size; i++){
						$field.getcItemType() value=list[i];
						#serializeNonList($field)
					}
				}
				#else
					#serializeNonList($field)
				#end
			}
		#end
		return;
	}
#end
	
	std::string errorMessage="Unknown class: ";
	errorMessage+=typeid(o).name();

	throw errorMessage;
}

#macro(deSerializeNonList $field )
	#if ($field.type == "bool")
		int value;
	#else
		$field.getcItemType() value;
	#end
	
	
	#if ($field.typeDescriptor.reference)
		## deserialize references
		value=(${field.getcItemType()}) DeSerialize(input);
	#else
		getline(input,line);
		if (sscanf(line.c_str(),"${field.typeDescriptor.scanfSpecification}",&value)!=1){
			throw "Parse Error";
		}
	#end
#end 
	
MultiLanguageObjectBase * MultiLanguageSerializationService::DeSerialize(istream &input){
	string line;
	
	getline(input,line);
	
	if (line.compare("<null>")==0){
		return NULL;
	}

#foreach($class in $classes)		
	if (line.compare("$class.name")==0){
		$class.name *result=new ${class.name}();
		
		#foreach($field in $class.fields)
		{
			getline(input,line);
			if (line.compare("${field.name}")!=0){
				throw "Parse Error";
			}
			#if ($field.class.simpleName=="MultiLanguageList")
			{
				## read the line with the count
				getline(input,line);
				int count;
				if (sscanf(line.c_str(),"%i",&count)!=1){
					throw "Parse Error";
				}
				
				## parse all elements
				for (int i=0; i<count; i++){
					#deSerializeNonList()
					result->get${field.nameUpperCamel}().push_back(value);
				}
			}
			#else
				#deSerializeNonList()
				result->set${field.nameUpperCamel}(value);
			#end
		}
		#end

		return result;
	}
#end

	throw "Parse Error";
}


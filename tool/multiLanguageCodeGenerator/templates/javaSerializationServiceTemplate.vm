package ch.ethz.ruediste.roofline.sharedDOM;

import java.io.*;
import java.util.Scanner;

/** Serializes and deserializes multi language objects */
public class MultiLanguageSerializationService{

	public void Serialize(Object o, OutputStream output, OutputStream outputDef){
		PrintStream stream=new PrintStream(output);
		PrintStream streamDef=new PrintStream(outputDef);
		SerializeImp(o, stream, streamDef);
	}
	
	public Object DeSerialize(InputStream input){
		Scanner scanner=new Scanner(input);
		return DeSerializeImp(scanner);
	}

## Macro serializing a field known not to be a reference	
#macro( serializeNonList $value )
	#if ($field.typeDescriptor.reference)
		SerializeImp($value,output,outputDef);
	#elseif ($field.class.simpleName=="MultiLanguageDefine")
		outputDef.print("\#define MULTI_LANGUAGE_DEFINE_${class.name}_$field.name ");
		#if ($field.type == "bool")
			outputDef.println(($value)?1:0);
		#else
			outputDef.println($value);
		#end			
	#else
		#if ($field.type == "bool")
			output.println(($value)?1:0);
		#else
			output.println($value);
		#end
	#end
#end
 
	private void SerializeImp(Object o, PrintStream output, PrintStream outputDef){
		if (o==null){
			output.println("<null>");
			return;
		}
		
		##iterate over all classes	
		#foreach($class in $classes)
			if (o.getClass()==${class.name}.class){
				output.println("$class.name");
	
				## iterate over all fields
				#foreach($field in $class.fields)
				
					## output field header
					#if ($field.class.simpleName != "MultiLanguageDefine")
						output.println("${field.name}");
					#end
					
					## check if the field is a list
					#if ($field.class.simpleName=="MultiLanguageList")
						## print the field size
						output.println((($class.name)o).get${field.nameUpperCamel}().size());
						
						## serialize all elements		
						for($field.typeDescriptor.javaBoxedName value : (($class.name)o).get${field.nameUpperCamel}()){
							#serializeNonList("value")
						}
					#else
						#serializeNonList("(($class.name)o).get${field.nameUpperCamel}()")
					#end
				#end
				return;
			}
		#end
		throw new Error("Unknown class: "+o.getClass().getName());
	}

	private Object DeSerializeImp(Scanner scanner) {
		if (scanner.hasNext("<null>")){
			scanner.next("<null>");
			return null;
		}
		
#foreach($class in $classes)		
		if (scanner.hasNext("$class.name")){
			$class.name result=new ${class.name}();
			scanner.next("$class.name");
#foreach($field in $class.fields)
#macro( parseNonReference ) 
#if ($field.type=="bool") scanner.${field.typeDescriptor.scannerMethod}()!=0 #else scanner.${field.typeDescriptor.scannerMethod}() #end 
#end

			{
				scanner.next("${field.name}");
#if ($field.class.simpleName=="MultiLanguageList")
				{
					long count=scanner.nextLong();
					for (int i=0; i<count; i++){
		
	#if ($field.typeDescriptor.reference)
						result.get${field.nameUpperCamel}().add(($field.typeDescriptor.javaName)DeSerializeImp(scanner));
	#else
						result.get${field.nameUpperCamel}().add(#parseNonReference());
	#end
				}
			}
#elseif ($field.typeDescriptor.reference)
			result.set${field.nameUpperCamel}(($field.typeDescriptor.javaName)DeSerializeImp(scanner));
#else
			result.set${field.nameUpperCamel}(#parseNonReference());
#end
			}
#end
			return result;
		}
#end
		
		throw new Error("Parse Error");
	}
}
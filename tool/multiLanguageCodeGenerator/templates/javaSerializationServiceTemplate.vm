## see the documentation for more information

package ch.ethz.ruediste.roofline.dom;

import java.io.*;
import java.util.Scanner;
import java.math.BigInteger;

/** Serializes and deserializes multi language objects */
public class MultiLanguageSerializationService{

	public void Serialize(Object o, OutputStream output){
		// we use a print stream for serialization
		PrintStream stream=new PrintStream(output);
		SerializeImp(o, stream);
	}
	
	public Object DeSerialize(InputStream input){
		// we use a scanner for parsing the input
		Scanner scanner=new Scanner(input);
		return DeSerializeImp(scanner);
	}
	
	/**
	 * escapes a string such that it can be serialized
	 */
	private String escapeString(String s) {
		StringBuilder result = new StringBuilder();

		// iterate over the input
		for (int i = 0; i < s.length(); i++) {
			char ch = s.charAt(i);

			// escape newlines
			if (ch == '\n') {
				result.append("\\n");
			}
			// escape backslashes
			else if (ch == '\\') {
				result.append("\\\\");
			}
			else {
				// it's a normal char, just append it
				result.append(ch);
			}
		}
		return result.toString();
	}

	/**
	 * revert the escaping
	 */
	private String deEscapeString(String s) {
		StringBuilder result = new StringBuilder();

		// iterate over the input
		for (int i = 0; i < s.length(); i++) {
			char ch = s.charAt(i);
			// is the current character the beginning of an escape sequence?
			if (ch == '\\') {
				// go to next char
				i++;

				// the sequence may not stop now
				if (i >= s.length()) {
					throw new Error("invalid string");
				}

				ch = s.charAt(i);

				// append the escaped character to the result
				if (ch == '\\') {
					result.append('\\');
				}
				else if (ch == 'n') {
					result.append('\n');
				}
				else {
					throw new Error("invalid character sequence \\" + ch);
				}
			}
			else {
				// it's a normal char, just append it
				result.append(ch);
			}
		}
		return result.toString();
	}

## Macro serializing a field known not to be a reference	
#macro( serializeNonList $value )
	#if ($field.typeDescriptor.reference)
		// for references, recursively serialize the referenced object
		SerializeImp($value,output);	
	#else
		#if ($field.type == "bool")
			// booleans are serialized using ones and zeros
			output.println(($value)?1:0);
		#elseif ($field.type == "string")
			// escape strings
			output.println(escapeString($value));
		#else
			output.println($value);
		#end
	#end
#end
 
	private void SerializeImp(Object o, PrintStream output){
		// check for null, and serialize with a string which 
		// can not be a class name
		if (o==null){
			output.println("<null>");
			return;
		}
		
		##iterate over all classes	
		#foreach($class in $classes)
			if (o.getClass()==${class.name}.class){
				output.println("$class.name");
	
				## iterate over all fields
				#foreach($field in $class.allFields)
				
					## output field header
					output.println("${field.name}");
					
					## check if the field is a list
					#if ($field.class.simpleName=="MultiLanguageList")
						## print the field size
						output.println((($class.name)o).get${field.nameUpperCamel}().size());
						
						## serialize all elements		
						for($field.typeDescriptor.javaBoxedName value : (($class.name)o).get${field.nameUpperCamel}()){
							#serializeNonList("value")
						}
					#else
						#serializeNonList("(($class.name)o).get${field.nameUpperCamel}()")
					#end
				#end
				return;
			}
		#end
		throw new Error("Unknown class: "+o.getClass().getName());
	}

#macro( parseNonReference ) 
	#if ($field.type=="bool") 
		scanner.${field.typeDescriptor.scannerMethod}()!=0 
	#elseif ($field.type=="string") 
		// strings are escaped
		deEscapeString(scanner.${field.typeDescriptor.scannerMethod}()) 
	#else 
		scanner.${field.typeDescriptor.scannerMethod}() 
	#end 
#end

#macro( advanceAfterParseNonReference ) 
#if ($field.type!="string") scanner.nextLine(); #end 
#end

private Object DeSerializeImp(Scanner scanner) {
	// parse null values
	if (scanner.hasNext("<null>")){
		scanner.next("<null>");
		scanner.nextLine();
		return null;
	}
	
	#foreach($class in $classes)	
		if (scanner.hasNext("$class.name")){
			// instantiate the resulting class instance
			$class.name result=new ${class.name}();
			
			// remove the class name
			scanner.next("$class.name");
			scanner.nextLine();
			
			#foreach($field in $class.allFields)
			{
				// remove the field name
				scanner.next("${field.name}");
				scanner.nextLine();
				
				#if ($field.class.simpleName=="MultiLanguageList")
				{
					long count=scanner.nextLong();
					for (int i=0; i<count; i++){
		
						#if ($field.typeDescriptor.reference)
							result.get${field.nameUpperCamel}().add(($field.typeDescriptor.javaName)DeSerializeImp(scanner));
						#else
							result.get${field.nameUpperCamel}().add(#parseNonReference());
							#advanceAfterParseNonReference
						#end
					}
				}
				#elseif ($field.typeDescriptor.reference)
					result.set${field.nameUpperCamel}(($field.typeDescriptor.javaName)DeSerializeImp(scanner));
				#else
					result.set${field.nameUpperCamel}(#parseNonReference());
					#advanceAfterParseNonReference
				#end
			}
			#end
			return result;
		}
	#end
		
	throw new Error("Parse Error");
}
}
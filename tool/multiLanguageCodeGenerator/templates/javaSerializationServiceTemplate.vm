package ch.ethz.ruediste.roofline.sharedDOM;

import java.io.*;
import java.util.Scanner;

/** Serializes and deserializes multi language objects */
public class MultiLanguageSerializationService{

	public void Serialize(Object o, OutputStream output){
		PrintStream stream=new PrintStream(output);
		SerializeImp(o, stream);
	}
	
	public Object DeSerialize(InputStream input){
		Scanner scanner=new Scanner(input);
		return DeSerializeImp(scanner);
	}
	
	private void SerializeImp(Object o, PrintStream output){
		if (o==null){
			output.println("<null>");
			return;
		}
		
#foreach($class in $classes)
		if (o.getClass()==${class.name}.class){
			output.println("$class.name");
#macro( serializeNonReference $value )
#if ($field.type == "bool")
			output.println(($value)?1:0);
#else
			output.println($value);
#end
#end 
#foreach($field in $class.fields)
			output.print("${field.name}\t");
	#if ($field.class.simpleName=="MultiLanguageList")
		output.println((($class.name)o).get${field.nameUpperCamel}().size());
		for($field.typeDescriptor.javaBoxedName value : (($class.name)o).get${field.nameUpperCamel}()){
			#serializeNonReference("value");
		}
	#elseif ($field.typeDescriptor.reference)
		output.println();
		SerializeImp((($class.name)o).get${field.nameUpperCamel}(),output);
	#else
		#serializeNonReference("(($class.name)o).get${field.nameUpperCamel}()")
	#end
#end
			return;
		}
#end
		throw new Error("Unknown class: "+o.getClass().getName());
	}

	private Object DeSerializeImp(Scanner scanner) {
		if (scanner.hasNext("<null>")){
			return null;
		}
		
#foreach($class in $classes)		
		if (scanner.hasNext("$class.name")){
			$class.name result=new ${class.name}();
			scanner.next("$class.name");
#foreach($field in $class.fields)
#macro( parseNonReference ) 
#if ($field.type=="bool") scanner.${field.typeDescriptor.scannerMethod}()!=0 #else scanner.${field.typeDescriptor.scannerMethod}() #end 
#end

			{
				scanner.next("${field.name}");
#if ($field.class.simpleName=="MultiLanguageList")
				{
					long count=scanner.nextLong();
					for (int i=0; i<count; i++){
		
	#if ($field.typeDescriptor.reference)
						result.get${field.nameUpperCamel}().add(($field.typeDescriptor.javaName)DeSerializeImp(scanner));
	#else
						result.get${field.nameUpperCamel}().add(#parseNonReference());
	#end
				}
			}
#elseif ($field.typeDescriptor.reference)
			result.set${field.nameUpperCamel}(($field.typeDescriptor.javaName)DeSerializeImp(scanner));
#else
			result.set${field.nameUpperCamel}(#parseNonReference());
#end
			}
#end
			return result;
		}
#end
		
		throw new Error("Parse Error");
	}
}
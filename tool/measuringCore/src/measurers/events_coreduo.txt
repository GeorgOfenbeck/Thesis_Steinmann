Active Event: coreduo::UNHALTED_CORE_CYCLES (3C)
Unhalted core cycles
--> CPU_CLK_UNHALTED:CORE_P
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::UNHALTED_REFERENCE_CYCLES (13C)
Unhalted reference cycles. Measures bus cycles
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::INSTRUCTION_RETIRED (C0)
Instructions retired
--> INSTR_RET
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::INSTRUCTIONS_RETIRED (C0)
This is an alias for INSTRUCTION_RETIRED
--> INSTRUCTION_RETIRED
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::LLC_REFERENCES (4F2E)
Last level of cache references
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::LAST_LEVEL_CACHE_REFERENCES (4F2E)
This is an alias for LLC_REFERENCES
--> LLC_REFERENCES
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::LLC_MISSES (412E)
Last level of cache misses
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::LAST_LEVEL_CACHE_MISSES (412E)
This is an alias for LLC_MISSES
--> LLC_MISSES
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BRANCH_INSTRUCTIONS_RETIRED (C4)
Branch instructions retired
--> BR_INSTR_RET
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::MISPREDICTED_BRANCH_RETIRED (C5)
Mispredicted branch instruction retired
--> BR_MISPRED_RET
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::LD_BLOCKS (3)
Load operations delayed due to store buffer blocks. The preceding store may be blocked due to unknown address, unknown data, or conflict due to partial overlap between the load and store.
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SD_DRAINS (4)
Cycles while draining store buffers
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::MISALIGN_MEM_REF (5)
Misaligned data memory references (MOB splits of loads and stores).
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SEG_REG_LOADS (6)
Segment register loads
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SSE_PREFETCH (7)
Streaming SIMD Extensions (SSE) Prefetch instructions executed
 * NTA (0): Streaming SIMD Extensions (SSE) Prefetch NTA instructions executed
 * T1 (1): SSE software prefetch instruction PREFE0xTCT1 retired
 * T2 (2): SSE software prefetch instruction PREFE0xTCT2 retired
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SSE_NTSTORES_RET (307)
SSE streaming store instruction retired
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::FP_COMPS_OP_EXE (10)
FP computational Instruction executed. FADD, FSUB, FCOM, FMULs, MUL, IMUL, FDIVs, DIV, IDIV, FPREMs, FSQRT are included; but exclude FADD or FMUL used in the middle of a transcendental instruction.
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::FP_ASSIST (11)
FP exceptions experienced microcode assists
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::MUL (12)
Multiply operations (a speculative count, including FP and integer multiplies).
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DIV (13)
Divide operations (a speculative count, including FP and integer multiplies). 
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::CYCLES_DIV_BUSY (14)
Cycles the divider is busy 
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_ADS (21)
L2 Address strobes 
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DBUS_BUSY (22)
Core cycle during which data buswas busy (increments by 4)
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DBUS_BUSY_RD (23)
Cycles data bus is busy transferring data to a core (increments by 4) 
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_LINES_IN (24)
L2 cache lines allocated
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_M_LINES_IN (25)
L2 Modified-state cache lines allocated
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_LINES_OUT (26)
L2 cache lines evicted 
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_M_LINES_OUT (27)
L2 Modified-state cache lines evicted 
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_IFETCH (28)
L2 instruction fetches from nstruction fetch unit (includes speculative fetches) 
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_LD (29)
L2 cache reads (includes speculation) 
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_ST (2A)
L2 cache writes (includes speculation)
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_RQSTS (2E)
L2 cache reference requests 
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_REJECT_CYCLES (30)
Cycles L2 is busy and rejecting new requests.
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L2_NO_REQUEST_CYCLES (32)
Cycles there is no request to access L2.
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::EST_TRANS_ALL (3A)
Any Intel Enhanced SpeedStep(R) Technology transitions
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::EST_TRANS_ALL (103A)
Intel Enhanced SpeedStep Technology frequency transitions
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::THERMAL_TRIP (3B)
Duration in a thermal trip based on the current core clock 
 * CYCLES (C0): Duration in a thermal trip based on the current core clock
 * TRIPS (4C0): Number of thermal trips
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::CPU_CLK_UNHALTED (3C)
Core cycles when core is not halted
 * CORE_P (0): Unhalted core cycles
 * NONHLT_REF_CYCLES (1): Non-halted bus cycles
 * SERIAL_EXECUTION_CYCLES (2): Non-halted bus cycles of this core executing code while the other core is halted
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DCACHE_CACHE_LD (40)
L1 cacheable data read operations
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DCACHE_CACHE_ST (41)
L1 cacheable data write operations
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DCACHE_CACHE_LOCK (42)
L1 cacheable lock read operations to invalid state
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DATA_MEM_REF (143)
L1 data read and writes of cacheable and non-cacheable types
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DATA_MEM_CACHE_REF (244)
L1 data cacheable read and write operations.
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DCACHE_REPL (F45)
L1 data cache line replacements
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DCACHE_M_REPL (46)
L1 data M-state cache line  allocated
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DCACHE_M_EVICT (47)
L1 data M-state cache line evicted
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DCACHE_PEND_MISS (48)
Weighted cycles of L1 miss outstanding
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DTLB_MISS (49)
Data references that missed TLB
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SSE_PRE_MISS (4B)
Streaming SIMD Extensions (SSE) instructions missing all cache levels
 * NTA_MISS (0): PREFETCHNTA missed all caches
 * T1_MISS (1): PREFETCHT1 missed all caches
 * T2_MISS (2): PREFETCHT2 missed all caches
 * STORES_MISS (3): SSE streaming store instruction missed all caches
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::L1_PREF_REQ (4F)
L1 prefetch requests due to DCU cache misses
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_REQ_OUTSTANDING (60)
Weighted cycles of cacheable bus data read requests. This event counts full-line read request from DCU or HW prefetcher, but not RFO, write, instruction fetches, or others.
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_BNR_CLOCKS (61)
External bus cycles while BNR asserted
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_DRDY_CLOCKS (62)
External bus cycles while DRDY asserted
 * THIS_AGENT (0): This agent
 * ALL_AGENTS (20): Any agent on the bus
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_LOCKS_CLOCKS (63)
External bus cycles while bus lock signal asserted
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_DATA_RCV (4064)
External bus cycles while bus lock signal asserted
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_BRD (65)
Burst read bus transactions (data or code)
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_RFO (66)
Completed read for ownership 
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_IFETCH (68)
Completed instruction fetch transactions
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_INVAL (69)
Completed invalidate transactions
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_PWR (6A)
Completed partial write transactions
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_P (6B)
Completed partial transactions (include partial read + partial write + line write)
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_IO (6C)
Completed I/O transactions (read and write)
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * ANY (30): All inclusive
 * PREFETCH (10): Hardware prefetch only
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_DEF (206D)
Completed defer transactions 
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_WB (C067)
Completed writeback transactions from DCU (does not include L2 writebacks)
 * THIS_AGENT (0): This agent
 * ALL_AGENTS (20): Any agent on the bus
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_BURST (C06E)
Completed burst transactions (full line transactions include reads, write, RFO, and writebacks) 
 * THIS_AGENT (0): This agent
 * ALL_AGENTS (20): Any agent on the bus
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_MEM (C06F)
Completed memory transactions. This includes Bus_Trans_Burst + Bus_Trans_P + Bus_Trans_Inval.
 * THIS_AGENT (0): This agent
 * ALL_AGENTS (20): Any agent on the bus
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_TRANS_ANY (C070)
Any completed bus transactions
 * THIS_AGENT (0): This agent
 * ALL_AGENTS (20): Any agent on the bus
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_SNOOPS (77)
External bus cycles while bus lock signal asserted
 * MESI (F): Any cacheline access
 * I_STATE (1): Invalid cacheline
 * S_STATE (2): Shared cacheline
 * E_STATE (4): Exclusive cacheline
 * M_STATE (8): Modified cacheline
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::DCU_SNOOP_TO_SHARE (178)
DCU snoops to share-state L1 cache line due to L1 misses 
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_NOT_IN_USE (7D)
Number of cycles there is no transaction from the core
 * SELF (40): This core
 * BOTH_CORES (C0): Both cores
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BUS_SNOOP_STALL (7E)
Number of bus cycles while bus snoop is stalled
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::ICACHE_READS (80)
Number of instruction fetches from ICache, streaming buffers (both cacheable and uncacheable fetches)
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::ICACHE_MISSES (81)
Number of instruction fetch misses from ICache, streaming buffers.
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::ITLB_MISSES (85)
Number of iITLB misses
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::IFU_MEM_STALL (86)
Cycles IFU is stalled while waiting for data from memory
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::ILD_STALL (87)
Number of instruction length decoder stalls (Counts number of LCP stalls)
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_INST_EXEC (88)
Branch instruction executed (includes speculation).
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_MISSP_EXEC (89)
Branch instructions executed and mispredicted at execution  (includes branches that do not have prediction or mispredicted)
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_BAC_MISSP_EXEC (8A)
Branch instructions executed that were mispredicted at front end
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_CND_EXEC (8B)
Conditional branch instructions executed
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_CND_MISSP_EXEC (8C)
Conditional branch instructions executed that were mispredicted
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_IND_EXEC (8D)
Indirect branch instructions executed
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_IND_MISSP_EXEC (8E)
Indirect branch instructions executed that were mispredicted
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_RET_EXEC (8F)
Return branch instructions executed
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_RET_MISSP_EXEC (90)
Return branch instructions executed that were mispredicted
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_RET_BAC_MISSP_EXEC (91)
Return branch instructions executed that were mispredicted at the front end
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_CALL_EXEC (92)
Return call instructions executed
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_CALL_MISSP_EXEC (93)
Return call instructions executed that were mispredicted
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_IND_CALL_EXEC (94)
Indirect call branch instructions executed
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::RESOURCE_STALL (A2)
Cycles while there is a resource related stall (renaming, buffer entries) as seen by allocator
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::MMX_INSTR_EXEC (B0)
Number of MMX instructions executed (does not include MOVQ and MOVD stores)
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SIMD_INT_SAT_EXEC (B1)
Number of SIMD Integer saturating instructions executed
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SIMD_INT_INSTRUCTIONS (B3)
Number of SIMD Integer instructions executed
 * MUL (1): Number of SIMD Integer packed multiply instructions executed
 * SHIFT (2): Number of SIMD Integer packed shift instructions executed
 * PACK (4): Number of SIMD Integer pack operations instruction executed
 * UNPACK (8): Number of SIMD Integer unpack instructions executed
 * LOGICAL (10): Number of SIMD Integer packed logical instructions executed
 * ARITHMETIC (20): Number of SIMD Integer packed arithmetic instructions executed
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::INSTR_RET (C0)
Number of instruction retired (Macro fused instruction count as 2)
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::FP_COMP_INSTR_RET (C1)
Number of FP compute instructions retired (X87 instruction or instruction that contain X87 operations)
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::UOPS_RET (C2)
Number of micro-ops retired (include fused uops)
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SMC_DETECTED (C3)
Number of times self-modifying code condition detected
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_INSTR_RET (C4)
Number of branch instructions retired
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_MISPRED_RET (C5)
Number of mispredicted branch instructions retired
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::CYCLES_INT_MASKED (C6)
Cycles while interrupt is disabled
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::CYCLES_INT_PEDNING_MASKED (C7)
Cycles while interrupt is disabled and interrupts are pending
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::HW_INT_RX (C8)
Number of hardware interrupts received
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_TAKEN_RET (C9)
Number of taken branch instruction retired
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_MISPRED_TAKEN_RET (CA)
Number of taken and mispredicted branch instructions retired
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::MMX_FP_TRANS (CC)
Transitions from MMX (TM) Instructions to Floating Point Instructions
 * TO_FP (0): Number of transitions from MMX to X87
 * TO_MMX (1): Number of transitions from X87 to MMX
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::MMX_ASSIST (CD)
Number of EMMS executed
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::MMX_INSTR_RET (CE)
Number of MMX instruction retired
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::INSTR_DECODED (D0)
Number of instruction decoded
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::ESP_UOPS (D7)
Number of ESP folding instruction decoded
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SSE_INSTRUCTIONS_RETIRED (D8)
Number of SSE/SSE2 instructions retired (packed and scalar)
 * SINGLE (0): Number of SSE/SSE2 single precision instructions retired (packed and scalar)
 * SCALAR_SINGLE (1): Number of SSE/SSE2 scalar single precision instructions retired
 * PACKED_DOUBLE (2): Number of SSE/SSE2 packed double percision instructions retired
 * DOUBLE (3): Number of SSE/SSE2 scalar double percision instructions retired
 * INT_128 (4): Number of SSE2 128 bit integer  instructions retired
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::SSE_COMP_INSTRUCTIONS_RETIRED (D9)
Number of computational SSE/SSE2 instructions retired (does not include AND, OR, XOR)
 * PACKED_SINGLE (0): Number of SSE/SSE2 packed single precision compute instructions retired (does not include AND, OR, XOR)
 * SCALAR_SINGLE (1): Number of SSE/SSE2 scalar single precision compute instructions retired (does not include AND, OR, XOR)
 * PACKED_DOUBLE (2): Number of SSE/SSE2 packed double precision compute instructions retired (does not include AND, OR, XOR)
 * SCALAR_DOUBLE (3): Number of SSE/SSE2 scalar double precision compute instructions retired (does not include AND, OR, XOR)
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::FUSED_UOPS (DA)
Fused uops retired
 * ALL (0): All fused uops retired
 * LOADS (1): Fused load uops retired
 * STORES (2): Fused load uops retired
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::UNFUSION (DB)
Number of unfusion events in the ROB (due to exception)
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_INSTR_DECODED (E0)
Branch instructions decoded
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BTB_MISSES (E2)
Number of branches the BTB did not produce a prediction
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BR_BOGUS (E4)
Number of bogus branches
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::BACLEARS (E6)
Number of BAClears asserted
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::PREF_RQSTS_UP (F0)
Number of hardware prefetch requests issued in forward streams
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)

Active Event: coreduo::PREF_RQSTS_DN (F8)
Number of hardware prefetch requests issued in backward streams
 * e (2): edge level (may require counter-mask >= 1)
 * i (3): invert
 * c (4): counter-mask in range [0-255]
 * u (0): monitor at user level
 * k (1): monitor at kernel level
 * period (3): sampling period
 * freq (4): sampling frequency (Hz)



struct fileLocation {
	bool valid;
	string fileName;
	uint32_t offset, start, stop;
	fileLocation() {
		valid = false;
	}
};

string readFile(string fileName) {
	std::ifstream t("file.txt");
	std::string str;

	t.seekg(0, std::ios::end);
	str.reserve(t.tellg());
	t.seekg(0, std::ios::beg);

	str.assign((std::istreambuf_iterator<char>(t)),
			std::istreambuf_iterator<char>());

	return str;
}

fileLocation getFileLocation(pid_t pid, uint32_t addr) {
	stringstream fileName;
	fileName << "/proc/" << pid << "/maps";
	//cout<<fileName.str()<<"\n";

	ifstream f(fileName.str().c_str());

	regex expression(
			"([0-9,a-f]*)\\-([0-9,a-f]*) .... ([0-9,a-f]*) [0-9,a-f][0-9,a-f]:[0-9,a-f][0-9,a-f] [0-9,a-f]* *(.*)?");

	while (f.good()) {
		string line;
		getline(f, line);
		//cout <<"<"<< line << ">"<<endl;
		if (line.empty())
			continue;
		cmatch what;
		if (!regex_match(line.c_str(), what, expression)) {
			cout << "failed to match line of map " << line.c_str() << "\n";
			exit(1);
		}
		/*cout<<"matched line ";
		 for (unsigned int i=1; i<what.size(); i++){
		 if (what[i].length()==0)
		 continue;
		 cout<<what[i].str()<<"|";
		 }
		 cout<<"\n";*/

		uint32_t start, stop;
		sscanf(what[1].str().c_str(), "%x", &start);
		sscanf(what[2].str().c_str(), "%x", &stop);

		if (addr >= start && addr < stop) {
			cout << "found desired address\n";
			if (what[4].length() == 0)
				continue;
			fileLocation result;
			sscanf(what[3].str().c_str(), "%x", &result.offset);
			// adjust the offset
			result.offset += addr - start;
			result.fileName = what[4].str();
			result.valid = true;
			result.start = start;
			result.stop = stop;
			return result;
		}

	}

	if (!f.eof()) {
		cerr << "error opening map file\n";
		exit(1);
	}
	f.close();
	return fileLocation();
}


/*
	 struct sigaction newAction;

	 memset(&newAction,0,sizeof(newAction));
	 newAction.sa_sigaction=trapHandler;
	 sigemptyset(&newAction.sa_mask);
	 newAction.sa_flags=SA_SIGINFO;

	 sigaction(SIGTRAP,&newAction,NULL);*/
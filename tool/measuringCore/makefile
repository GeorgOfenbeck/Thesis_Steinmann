# makefile for the measuring core

# build directory
BUILD_DIR=build

# libraries for linking
LIBS=-lpfm -lstdc++ 

# command for the compiler
GCC=ccache gcc

# compilation flags
CFLAGS=-Wall -ggdb
OPTIMIZATION_FLAGS=-O2

# source files to be ignored. separated by space
SOURCE_IGNORE_PATTERNS=./src/oldMain.cpp 

# additional directories to search for includes
INCLUDE_DIRS=-I"src" -I"generated" 

# flags for generating the .d files
DEP_FLAGS=-MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)"

# setup the kernel used
KERNEL_NAMES=Dummy
include generated/kernelNames.mk

# read additional flags generated by the measurement driver
include generated/additionalFlags.mk

# setup the kernel optimization flags
$(foreach kernel,$(KERNEL_NAMES),$(eval include generated/kernelOptimization/kernelOptimization$(kernel).mk))

#define functions
sourcesToObjects=$(addprefix $(BUILD_DIR)/, $(addsuffix .o, $(basename $(1))))
sourcesToDeps=$(addprefix $(BUILD_DIR)/, $(addsuffix .d, $(basename $(1))))

# search for the source files in the ./src directory. Filter out the ignored source files
ALL_SOURCES=$(filter-out $(SOURCE_IGNORE_PATTERNS),$(shell find -L -name "*.cpp" \( -path "./src/*" -o -path "./generated/*" \) -print))

# extract the source files for the current kernels, create object file names
$(foreach KERNEL_NAME,$(KERNEL_NAMES),$(eval KERNEL_SOURCES_$(KERNEL_NAME)=$(filter ./src/sharedDOM/$(KERNEL_NAME)Kernel.cpp ./src/sharedDOM/$(KERNEL_NAME)/%, $(ALL_SOURCES))))
$(foreach KERNEL_NAME,$(KERNEL_NAMES),$(eval KERNEL_OBJECTS_$(KERNEL_NAME)=$(call sourcesToObjects, $(KERNEL_SOURCES_$(KERNEL_NAME)))))

#combine the sources and objects of the individual kernels to a list
KERNEL_SOURCES=$(foreach kernel,$(KERNEL_NAMES),$(KERNEL_SOURCES_$(kernel)))
KERNEL_OBJECTS=$(foreach kernel,$(KERNEL_NAMES),$(KERNEL_OBJECTS_$(kernel)))

# extract the sources of the parent process
PARENT_SOURCES=$(filter ./src/parent/%.cpp, $(ALL_SOURCES))
PARENT_OBJECTS=$(call sourcesToObjects, $(PARENT_SOURCES))

# assign the remaining sources to the child
CHILD_SOURCES=$(filter-out $(KERNEL_SOURCES) $(PARENT_SOURCES) ./src/sharedDOM/%Kernel.cpp, $(ALL_SOURCES))
CHILD_OBJECTS=$(call sourcesToObjects, $(CHILD_SOURCES))

# search for .d files in the build directories
PRESENT_DEP_FILES=$(patsubst ./build/%, build/./%, $(shell find -L -name "*.d" -path "./$(BUILD_DIR)/*"))

# generate .d file names from the source file names
GENERATED_DEP_FILES=$(call sourcesToDeps, $(ALL_SOURCES))

# keep only the .d files present which are required
DEP_FILES=$(filter $(GENERATED_DEP_FILES), $(PRESENT_DEP_FILES))

.PHONY: all clean clean_kernels 

# rule for the executable
all: $(BUILD_DIR)/measuringCore $(BUILD_DIR)/childProcess

# rule for cleaning. just delete the build dir
clean:
	rm -rf $(BUILD_DIR)/
	
# creates the executable from the .o files
$(BUILD_DIR)/childProcess: $(CHILD_OBJECTS) $(KERNEL_OBJECTS) generated/kernelNames.mk
	$(GCC) -pthread -rdynamic -o $@ $(CHILD_OBJECTS) $(KERNEL_OBJECTS) $(LIBS)

$(BUILD_DIR)/measuringCore: $(PARENT_OBJECTS) $(BUILD_DIR)/./src/Notifications.o
	$(GCC) -o $@ $(PARENT_OBJECTS) $(BUILD_DIR)/./src/Notifications.o -lstdc++

#include all dependency files
include $(DEP_FILES)


# special rules for certain files ....

# compile without optimization, to ease generation of code for flushing L1 caches
$(BUILD_DIR)/./src/sharedDOM/WorkloadClearL1I.o: src/sharedDOM/WorkloadClearL1I.cpp
	mkdir -p $(BUILD_DIR)/$(dir $<)
	$(GCC) $(CFLAGS) -O0 $(DEP_FLAGS) $(INCLUDE_DIRS) -ftemplate-depth=4096 -c -o $@ $<
# add more rules here when needed	

# make the kernels depend on the kernel optimization flags
$(foreach kernel,$(KERNEL_NAMES),$(eval $(KERNEL_OBJECTS_$(kernel)): generated/kernelOptimization/kernelOptimization$(kernel).mk))


# rule for the kernels
define KERNEL_RULE_template
$$(KERNEL_OBJECTS_$(1)): $(BUILD_DIR)/%.o: %.cpp
	mkdir -p $(BUILD_DIR)/$$(dir $$<)
	$(GCC) $(CFLAGS) $(KERNEL_OPTIMIZATION_FLAGS_$(1)) -Wa,-ahl=$$(patsubst %.o,%.s,$$@) $$(DEP_FLAGS) $(INCLUDE_DIRS) -c -o $$@ $$<
endef
$(foreach kernel,$(KERNEL_NAMES),$(eval $(call KERNEL_RULE_template,$(kernel))))


# the default rule
$(BUILD_DIR)/%.o: %.cpp
	mkdir -p $(BUILD_DIR)/$(dir $<)
	$(GCC) $(CFLAGS) $(OPTIMIZATION_FLAGS) $(DEP_FLAGS) -Wa,-ahl=$(patsubst %.o,%.s,$@) $(INCLUDE_DIRS) -c -o $@ $<
	
